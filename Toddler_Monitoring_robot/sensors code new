// Arduino Uno Robot Controller
// Autonomous template where you can add your own conditions
// Prints command + sensor data every cycle

#include <NewPing.h>

// --- Ultrasonic Sensor Pins ---
#define TRIG_PIN_FRONT  10
#define ECHO_PIN_FRONT  11
#define TRIG_PIN_LEFT   8
#define ECHO_PIN_LEFT   9
#define TRIG_PIN_RIGHT  6
#define ECHO_PIN_RIGHT  7
#define MAX_DISTANCE    200   // Max distance in cm

// --- Other Sensor Pins ---
#define SOUND_SENSOR_PIN    A0
#define MOISTURE_SENSOR_PIN A1

// --- Motor Control Pins (L298N) ---
#define MOTOR_PIN_LEFT_FORWARD   2
#define MOTOR_PIN_LEFT_BACKWARD  3
#define MOTOR_PIN_RIGHT_FORWARD  4
#define MOTOR_PIN_RIGHT_BACKWARD 5
// --- ISD1820 Module Pin ---
#define ISD1820_PLAYE_PIN  12   // Connect to PLAYE on ISD1820

// --- Ultrasonic Sensors (NewPing) ---
NewPing sonarFront(TRIG_PIN_FRONT, ECHO_PIN_FRONT, MAX_DISTANCE);
NewPing sonarLeft(TRIG_PIN_LEFT, ECHO_PIN_LEFT, MAX_DISTANCE);
NewPing sonarRight(TRIG_PIN_RIGHT, ECHO_PIN_RIGHT, MAX_DISTANCE);



#define SOUND_THRESHOLD 1018   // Play ISD1820 if sound level > 1000



void setup() {
  Serial.begin(115200);

  pinMode(MOTOR_PIN_LEFT_FORWARD, OUTPUT);
  pinMode(MOTOR_PIN_LEFT_BACKWARD, OUTPUT);
  pinMode(MOTOR_PIN_RIGHT_FORWARD, OUTPUT);
  pinMode(MOTOR_PIN_RIGHT_BACKWARD, OUTPUT);


  pinMode(ISD1820_PLAYE_PIN, OUTPUT);
  digitalWrite(ISD1820_PLAYE_PIN, LOW);  // idle

  stopMotors();
}

void loop() {
  // --- Read sensors ---
  int distanceRight  = sonarFront.ping_cm();
  int distanceLeft   = sonarLeft.ping_cm();
  int distanceMiddle  = sonarRight.ping_cm();
  int soundLevel     = analogRead(SOUND_SENSOR_PIN);
  int moistureLevel  = analogRead(MOISTURE_SENSOR_PIN);

  // --- Your custom conditions go here ---
  if (distanceMiddle >= 15 && distanceMiddle < 30) {
    moveForward();
  } else if (distanceMiddle < 15) {
    moveBackward();
  } else if (distanceLeft >= 18 && distanceLeft < 30) {
    turnLeft();
  } else if (distanceRight >= 18 && distanceRight < 30) {
    turnRight();
  }else if (distanceLeft < 18 ) {
    moveBackwardLeft();
  } else if (distanceRight < 18 ) {
    moveBackwardRight();
  }
   else {
    stopMotors();
  }


    if (soundLevel >= SOUND_THRESHOLD) {
    Serial.println("⚠️ Baby Cry Detected! Playing Recorded message...");
    playISD1820();
  }

  // --- Print sensor data every loop ---
  Serial.print("Sensors: ");
  Serial.print("R: ");
  Serial.print(distanceRight);
  Serial.print(",");
  Serial.print("M: ");
  Serial.print(distanceMiddle);
  Serial.print(",");
  Serial.print("L: ");
  Serial.print(distanceLeft);
  Serial.print(",");
  Serial.print("SoundLevel: ");
  Serial.println(soundLevel);


  delay(200);  // Adjust refresh rate
}

// --- Motor Control Functions ---
// Stop
void stopMotors() {
  digitalWrite(MOTOR_PIN_LEFT_FORWARD, LOW);
  digitalWrite(MOTOR_PIN_LEFT_BACKWARD, LOW);
  digitalWrite(MOTOR_PIN_RIGHT_FORWARD, LOW);
  digitalWrite(MOTOR_PIN_RIGHT_BACKWARD, LOW);
  Serial.println("Command: Stop");
}

// Forward
void moveForward() {
  digitalWrite(MOTOR_PIN_LEFT_FORWARD, HIGH);
  digitalWrite(MOTOR_PIN_LEFT_BACKWARD, LOW);
  digitalWrite(MOTOR_PIN_RIGHT_FORWARD, HIGH);
  digitalWrite(MOTOR_PIN_RIGHT_BACKWARD, LOW);
  Serial.println("Command: Forward");
}

// Backward
void moveBackward() {
  digitalWrite(MOTOR_PIN_LEFT_FORWARD, LOW);
  digitalWrite(MOTOR_PIN_LEFT_BACKWARD, HIGH);
  digitalWrite(MOTOR_PIN_RIGHT_FORWARD, LOW);
  digitalWrite(MOTOR_PIN_RIGHT_BACKWARD, HIGH);
  Serial.println("Command: Backward");
}

// Left (pivot turn)
void turnLeft() {
  digitalWrite(MOTOR_PIN_LEFT_FORWARD, LOW);
  digitalWrite(MOTOR_PIN_LEFT_BACKWARD, HIGH);
  digitalWrite(MOTOR_PIN_RIGHT_FORWARD, HIGH);
  digitalWrite(MOTOR_PIN_RIGHT_BACKWARD, LOW);
  Serial.println("Command: Left");
}

// Right (pivot turn)
void turnRight() {
  digitalWrite(MOTOR_PIN_LEFT_FORWARD, HIGH);
  digitalWrite(MOTOR_PIN_LEFT_BACKWARD, LOW);
  digitalWrite(MOTOR_PIN_RIGHT_FORWARD, LOW);
  digitalWrite(MOTOR_PIN_RIGHT_BACKWARD, HIGH);
  Serial.println("Command: Right");
}

// Backward Left
void moveBackwardLeft() {
  digitalWrite(MOTOR_PIN_LEFT_FORWARD, LOW);
  digitalWrite(MOTOR_PIN_LEFT_BACKWARD, LOW);   // Left motor stopped
  digitalWrite(MOTOR_PIN_RIGHT_FORWARD, LOW);
  digitalWrite(MOTOR_PIN_RIGHT_BACKWARD, HIGH); // Right motor moves backward
  Serial.println("Command: Backward Left");
}

// Backward Right
void moveBackwardRight() {
  digitalWrite(MOTOR_PIN_LEFT_FORWARD, LOW);
  digitalWrite(MOTOR_PIN_LEFT_BACKWARD, HIGH);  // Left motor moves backward
  digitalWrite(MOTOR_PIN_RIGHT_FORWARD, LOW);
  digitalWrite(MOTOR_PIN_RIGHT_BACKWARD, LOW);  // Right motor stopped
  Serial.println("Command: Backward Right");
}


void playISD1820() {
  digitalWrite(ISD1820_PLAYE_PIN, HIGH);
  delay(200);  // short trigger pulse
  digitalWrite(ISD1820_PLAYE_PIN, LOW);
}
